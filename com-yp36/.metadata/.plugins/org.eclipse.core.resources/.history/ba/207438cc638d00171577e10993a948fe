package com.yp36.common.redis.impl;

import com.agri.cf.common.redis.RedisDataSource;
import com.agri.cf.common.redis.AgricfRedisClient;
import com.agri.cf.common.redis.exception.RedisAccessException;
import lombok.Getter;
import lombok.Setter;
import lombok.extern.slf4j.Slf4j;
import redis.clients.jedis.ShardedJedis;
import redis.clients.jedis.ShardedJedisPipeline;
import redis.clients.util.ShardInfo;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 *
 * Created by yangpeng on 2017/06/12.
 */
@Slf4j
@Setter
@Getter
public class AgricfRedisClientImpl implements AgricfRedisClient {

    RedisDataSource redisDataSource;

    public String getShardInfo(String key) throws RedisAccessException {
        ShardedJedis shardedJedis = null;
        try {
            StringBuffer sb = new StringBuffer();
            ShardInfo shardInfo = shardedJedis.getShardInfo(key);
            sb.append("shard name: ").append(shardInfo.getName()).append("#weight").append(shardInfo.getWeight());
            return sb.toString();
        } catch (Exception e) {
            throw new RedisAccessException(e);
        } finally {
            if (null != shardedJedis) {
                shardedJedis.close();
            }
        }
    }

    public Long del(String key) throws RedisAccessException {
        ShardedJedis shardedJedis = null;
        try {
            shardedJedis = redisDataSource.getRedisClient();
            return shardedJedis.del(key);
        } catch (Exception e) {
            throw new RedisAccessException(e);
        } finally {
            if (null != shardedJedis) {
                shardedJedis.close();
            }
        }
    }

    public String get(String key) throws RedisAccessException {
        ShardedJedis shardedJedis = null;
        try {
            shardedJedis = redisDataSource.getRedisClient();
            return shardedJedis.get(key);
        } catch (Exception e) {
            throw new RedisAccessException(e);
        } finally {
            if (null != shardedJedis) {
                shardedJedis.close();
            }
        }
    }

    public String set(String key, String value) throws RedisAccessException {
        ShardedJedis shardedJedis = null;
        try {
            shardedJedis = redisDataSource.getRedisClient();
            return shardedJedis.set(key, value);
        } catch (Exception e) {
            throw new RedisAccessException(e);
        } finally {
            if (null != shardedJedis) {
                shardedJedis.close();
            }
        }
    }

    public String hmset(String key, Map<String, String> value) throws RedisAccessException {
        ShardedJedis shardedJedis = null;
        try {
            shardedJedis = redisDataSource.getRedisClient();
            return shardedJedis.hmset(key, value);
        } catch (Exception e) {
            throw new RedisAccessException(e);
        } finally {
            if (null != shardedJedis) {
                shardedJedis.close();
            }
        }
    }

    public List<String> hmget(String key, String... value) throws RedisAccessException {
        ShardedJedis shardedJedis = null;
        try {
            shardedJedis = redisDataSource.getRedisClient();
            return shardedJedis.hmget(key, value);
        } catch (Exception e) {
            throw new RedisAccessException(e);
        } finally {
            if (null != shardedJedis) {
                shardedJedis.close();
            }
        }
    }

    public Map<String, String> hgetAll(String key) throws RedisAccessException {
        ShardedJedis shardedJedis = null;
        try {
            shardedJedis = redisDataSource.getRedisClient();
            return shardedJedis.hgetAll(key);
        } catch (Exception e) {
            throw new RedisAccessException(e);
        } finally {
            if (null != shardedJedis) {
                shardedJedis.close();
            }
        }
    }

    public List<Object> setWithPipeline(Map<String, String> key, int timeout) throws RedisAccessException {
        ShardedJedis shardedJedis = null;
        try {
            shardedJedis = redisDataSource.getRedisClient();
            ShardedJedisPipeline shardedJedisPipeline = shardedJedis.pipelined();
            for (String var1 : key.keySet()) {
                shardedJedisPipeline.setex(var1, timeout, key.get(var1));
            }
            return shardedJedisPipeline.syncAndReturnAll();
        } catch (Exception e) {
            throw new RedisAccessException(e);
        } finally {
            if (null != shardedJedis) {
                shardedJedis.close();
            }
        }
    }

    public Map<String, String> mget2map(String... key) throws RedisAccessException {
        ShardedJedisPipeline shardedJedisPipeline;
        ShardedJedis shardedJedis = null;
        try {
            shardedJedis = redisDataSource.getRedisClient();
            Map<String, String> result = new HashMap<String, String>();
            shardedJedisPipeline = shardedJedis.pipelined();
            for (int i = 0; i < key.length; i++) {
                shardedJedisPipeline.get(key[i]);
            }
            List<Object> data = shardedJedisPipeline.syncAndReturnAll();
            for (int i = 0; i < data.size(); i++) {
                if (null != data.get(i)) {
                    result.put(key[i], data.get(i).toString());
                }
            }
            return result;
        } catch (Exception e) {
            throw new RedisAccessException(e);
        } finally {
            if (null != shardedJedis) {
                shardedJedis.close();
            }
        }
    }

    public Long expire(String key, int timeout) throws RedisAccessException {
        ShardedJedis shardedJedis = null;
        try {
            shardedJedis = redisDataSource.getRedisClient();
            return shardedJedis.expire(key, timeout);
        } catch (Exception e) {
            throw new RedisAccessException(e);
        } finally {
            if (null != shardedJedis) {
                shardedJedis.close();
            }
        }
    }

    public Long expireAt(String key, long timestamp) throws RedisAccessException {
        ShardedJedis shardedJedis = null;
        try {
            shardedJedis = redisDataSource.getRedisClient();
            return shardedJedis.expireAt(key, timestamp);
        } catch (Exception e) {
            throw new RedisAccessException(e);
        } finally {
            if (null != shardedJedis) {
                shardedJedis.close();
            }
        }
    }

    public String setex(String key, int timeout, String value) throws RedisAccessException {
        ShardedJedis shardedJedis = null;
        try {
            shardedJedis = redisDataSource.getRedisClient();
            return shardedJedis.setex(key, timeout, value);
        } catch (Exception e) {
            throw new RedisAccessException(e);
        } finally {
            if (null != shardedJedis) {
                shardedJedis.close();
            }
        }
    }

    public Long incrBy(String key, long increment) throws RedisAccessException {
        ShardedJedis shardedJedis = null;
        try {
            shardedJedis = redisDataSource.getRedisClient();
            return shardedJedis.incrBy(key, increment);
        } catch (Exception e) {
            throw new RedisAccessException(e);
        } finally {
            if (null != shardedJedis) {
                shardedJedis.close();
            }
        }
    }

    public Long hset(String key, String filed, String value) throws RedisAccessException {
        ShardedJedis shardedJedis = null;
        try {
            shardedJedis = redisDataSource.getRedisClient();
            return shardedJedis.hset(key, filed, value);
        } catch (Exception e) {
            throw new RedisAccessException(e);
        } finally {
            if (null != shardedJedis) {
                shardedJedis.close();
            }
        }
    }

    public Long hsetnx(String key, String field, String value) throws RedisAccessException {
        ShardedJedis shardedJedis = null;
        try {
            shardedJedis = redisDataSource.getRedisClient();
            return shardedJedis.hsetnx(key, field, value);
        } catch (Exception e) {
            throw new RedisAccessException(e);
        } finally {
            if (null != shardedJedis) {
                shardedJedis.close();
            }
        }
    }

    public String hget(String key, String field) throws RedisAccessException {
        ShardedJedis shardedJedis = null;
        try {
            shardedJedis = redisDataSource.getRedisClient();
            return shardedJedis.hget(key, field);
        } catch (Exception e) {
            throw new RedisAccessException(e);
        } finally {
            if (null != shardedJedis) {
                shardedJedis.close();
            }
        }
    }

    public Long rpush(String key, String... value) throws RedisAccessException {
        ShardedJedis shardedJedis = null;
        try {
            shardedJedis = redisDataSource.getRedisClient();
            return shardedJedis.rpush(key, value);
        } catch (Exception e) {
            throw new RedisAccessException(e);
        } finally {
            if (null != shardedJedis) {
                shardedJedis.close();
            }
        }
    }

    public Long rpushx(String key, String value) throws RedisAccessException {
        ShardedJedis shardedJedis = null;
        try {
            shardedJedis = redisDataSource.getRedisClient();
            return shardedJedis.rpushx(key, value);
        } catch (Exception e) {
            throw new RedisAccessException(e);
        } finally {
            if (null != shardedJedis) {
                shardedJedis.close();
            }
        }
    }

    public Long lpush(String key, String... value) throws RedisAccessException {
        ShardedJedis shardedJedis = null;
        try {
            shardedJedis = redisDataSource.getRedisClient();
            return shardedJedis.lpush(key, value);
        } catch (Exception e) {
            throw new RedisAccessException(e);
        } finally {
            if (null != shardedJedis) {
                shardedJedis.close();
            }
        }
    }

    public Long lpushx(String key, String value) throws RedisAccessException {
        ShardedJedis shardedJedis = null;
        try {
            shardedJedis = redisDataSource.getRedisClient();
            return shardedJedis.lpushx(key, value);
        } catch (Exception e) {
            throw new RedisAccessException(e);
        } finally {
            if (null != shardedJedis) {
                shardedJedis.close();
            }
        }
    }

    public String lpop(String key) throws RedisAccessException {
        ShardedJedis shardedJedis = null;
        try {
            shardedJedis = redisDataSource.getRedisClient();
            return shardedJedis.lpop(key);
        } catch (Exception e) {
            throw new RedisAccessException(e);
        } finally {
            if (null != shardedJedis) {
                shardedJedis.close();
            }
        }
    }

    public String rpop(String key) throws RedisAccessException {
        ShardedJedis shardedJedis = null;
        try {
            shardedJedis = redisDataSource.getRedisClient();
            return shardedJedis.rpop(key);
        } catch (Exception e) {
            throw new RedisAccessException(e);
        } finally {
            if (null != shardedJedis) {
                shardedJedis.close();
            }
        }
    }

    public List<String> lrange(String key, long start, long end) throws RedisAccessException {
        ShardedJedis shardedJedis = null;
        try {
            shardedJedis = redisDataSource.getRedisClient();
            return shardedJedis.lrange(key, start, end);
        } catch (Exception e) {
            throw new RedisAccessException(e);
        } finally {
            if (null != shardedJedis) {
                shardedJedis.close();
            }
        }
    }
}
